import os
import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import (
    KeyboardButton,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    InlineKeyboardButton,
    InlineKeyboardMarkup
)
import django
from dotenv import load_dotenv
from asgiref.sync import sync_to_async, async_to_sync
from django.db.models.signals import post_save
from django.dispatch import receiver

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Django
load_dotenv()
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
django.setup()

from partner.models import Partner, Courier, Order, Store, OrderItem, OrderByClient

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
API_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞
contact_kb = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text='–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç', request_contact=True)]],
    resize_keyboard=True
)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message(Command('start'))
async def cmd_start(message: types.Message):
    await message.answer(
        'üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫—É—Ä—å–µ—Ä—Å–∫—É—é —Å–ª—É–∂–±—É Tass!\n'
        '–î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:',
        reply_markup=contact_kb
    )

@dp.message(F.content_type == 'contact')
async def handle_contact(message: types.Message):
    phone = ''.join(filter(str.isdigit, message.contact.phone_number))
    tg_id = str(message.from_user.id)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—É—Ä—å–µ—Ä–∞
        courier = await sync_to_async(Courier.objects.get)(phone_number=phone)
        courier.tg_code = tg_id
        await sync_to_async(courier.save)()
        await message.answer('‚úÖ –í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫ –∫—É—Ä—å–µ—Ä!', reply_markup=ReplyKeyboardRemove())
    except Courier.DoesNotExist:
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞
            partner = await sync_to_async(Partner.objects.get)(phone_number=phone)
            partner.tg_code = tg_id
            await sync_to_async(partner.save)()
            await message.answer('‚úÖ –í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫ –ø–∞—Ä—Ç–Ω–µ—Ä!', reply_markup=ReplyKeyboardRemove())
        except Partner.DoesNotExist:
            await message.answer('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!', reply_markup=contact_kb)

@dp.callback_query(F.data.startswith('take_'))
async def take_order(callback: types.CallbackQuery):
    order_id = callback.data.split('_', 1)[1]
    tg_id     = str(callback.from_user.id)

    # 1) –ù–∞–∑–Ω–∞—á–∞–µ–º –∫—É—Ä—å–µ—Ä–∞ –∏ –º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å
    order   = await sync_to_async(Order.objects.get)(pk=order_id)
    courier = await sync_to_async(Courier.objects.get)(tg_code=tg_id)
    if order.courier:
        return await callback.answer('‚ö†Ô∏è –ó–∞–∫–∞–∑ —É–∂–µ –≤–∑—è—Ç!', show_alert=True)

    order.courier = courier
    order.status  = 'en_route'
    await sync_to_async(order.save)()

    await callback.answer('‚úÖ –í—ã –≤–∑—è–ª–∏ –∑–∞–∫–∞–∑!')

    # 2) –°—Ä–∞–∑—É –≤—ã–∑—ã–≤–∞–µ–º –ø–æ–∫–∞–∑ –≤—ã–±–æ—Ä–∞ –º–∞–≥–∞–∑–∏–Ω–∞
    await show_branch_selection(callback, order)

    complete_button = InlineKeyboardMarkup(inline_keyboard=[[
    InlineKeyboardButton(
        text="–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑",
        callback_data=f"complete_store_{order.id}"
    )
    ]])

    await bot.send_message(
        chat_id=courier.tg_code,
        text=f"üöö –ó–∞–∫–∞–∑ #{order.id} –Ω–∞–∑–Ω–∞—á–µ–Ω –≤–∞–º.\n"
            f"–ê–¥—Ä–µ—Å: {order.delivery_address}\n"
            f"–û–∂–∏–¥–∞–µ—Ç—Å—è –¥–æ—Å—Ç–∞–≤–∫–∞.",
        reply_markup=complete_button
    )


async def show_branch_selection(callback: types.CallbackQuery, order: Order):
    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ—Ö Partner-—Ñ–∏–ª–∏–∞–ª–æ–≤ –ø–æ –º–∞–≥–∞–∑–∏–Ω–∞–º –∏–∑ –∑–∞–∫–∞–∑–∞
    items = await sync_to_async(list)(
        order.items.select_related('product__store')
    )
    partners_map = {}
    for item in items:
        store = item.product.store
        # –ë–µ—Ä—ë–º –≤—Å–µ—Ö –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤ (—Ñ–∏–ª–∏–∞–ª—ã) —ç—Ç–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞
        partners = await sync_to_async(list)(store.partners.all())
        for pr in partners:
            partners_map[pr.id] = pr

    if not partners_map:
        await callback.message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∏–ª–∏–∞–ª–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞.")
        return

    # –ö–Ω–æ–ø–∫–∏ —Å callback_data = selectbranch_<order_id>_<partner_id>
    buttons = [
        [InlineKeyboardButton(
            text=pr.address,
            callback_data=f"selectbranch_{order.id}_{pr.id}"
        )]
        for pr in partners_map.values()
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    await callback.message.answer(
        "üè™ –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª–∏–∞–ª –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:",
        reply_markup=keyboard
    )
    

@dp.callback_query(F.data.startswith("selectbranch_"))
async def select_branch(callback: types.CallbackQuery):
    _, order_id, partner_id = callback.data.split("_", 2)
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã —á–µ—Ä–µ–∑ sync_to_async
    order, partner = await sync_to_async(lambda: (
        Order.objects.get(pk=order_id),
        Partner.objects.get(pk=partner_id)
    ))()
    courier = await sync_to_async(lambda: Courier.objects.get(tg_code=str(callback.from_user.id)))()

    order.partner = partner
    await sync_to_async(order.save)()

    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏–∏ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –ø–∞—Ä—Ç–Ω–µ—Ä—É
    items = await sync_to_async(list)(
        order.items.filter(product__store__partners=partner).select_related('product')
    )
    items_text = "\n".join(
        f"‚Ä¢ {it.product.name} √ó {it.quantity} ({it.product.description}) ‚Äî {float(it.product.price) * it.quantity:.2f} —Å–æ–º"
        for it in items
    )
    total = sum(float(it.product.price) * it.quantity for it in items)

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º –ø—Ä–æ–º–æ–∫–æ–¥, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å –∏ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ —Ç–µ–∫—É—â–µ–º—É –ø–∞—Ä—Ç–Ω–µ—Ä—É
    promo = await sync_to_async(lambda: order.promocode_used)()
    promo_line = ""
    if promo:
        # –£–∑–Ω–∞–µ–º, –∫ –∫–∞–∫–æ–º—É –º–∞–≥–∞–∑–∏–Ω—É –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ø—Ä–æ–º–æ–∫–æ–¥
        promo_store = await sync_to_async(lambda: promo.store)()
        # –ï—Å–ª–∏ —ç—Ç–æ—Ç –º–∞–≥–∞–∑–∏–Ω –ø–æ—Å—Ç–∞–≤–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∏–ª–∏–∞–ª –ø–∞—Ä—Ç–Ω–µ—Ä–∞
        if await sync_to_async(lambda: promo_store.partners.filter(pk=partner.pk).exists())():
            promo_line = f"\n–ü—Ä–æ–º–æ–∫–æ–¥: {promo.code} ‚Äî —Å–∫–∏–¥–∫–∞ {promo.discount_amount} —Å–æ–º"
            total -= promo.discount_amount

    courier_name = courier.user or courier.phone_number
    receipt = (
        f"üßæ –ß–µ–∫ –∑–∞–∫–∞–∑–∞ #{order.id}\n"
        f"{items_text}{promo_line}\n"
        f"–ò—Ç–æ–≥–æ: {total:.2f} —Å–æ–º\n"
        f"–ö—É—Ä—å–µ—Ä: {courier_name}"
    )

    if partner.tg_code:
        await bot.send_message(partner.tg_code, receipt)
    await callback.answer("‚úÖ –§–∏–ª–∏–∞–ª –≤—ã–±—Ä–∞–Ω –∏ —á–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")


@dp.callback_query(lambda c: c.data and c.data.startswith("client_take_"))
async def process_take_client(callback_query: types.CallbackQuery):
    try:
        order_id = int(callback_query.data.split("_")[-1])
        user_tg = callback_query.from_user.id

        # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—å–µ—Ä–∞
        courier = await sync_to_async(Courier.objects.get)(tg_code=str(user_tg))
        order = await sync_to_async(OrderByClient.objects.get)(pk=order_id)

        if order.courier:
            await callback_query.answer("–ó–∞—è–≤–∫–∞ —É–∂–µ –≤–∑—è—Ç–∞ –¥—Ä—É–≥–∏–º –∫—É—Ä—å–µ—Ä–æ–º.", show_alert=True)
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑
        order.courier = courier
        order.status = 'en_route'
        await sync_to_async(order.save)()

        # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–í–∑—è—Ç—å –∑–∞—è–≤–∫—É" –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        await bot.edit_message_reply_markup(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            reply_markup=None
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        await callback_query.answer("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –≤–∑—è–ª–∏ –∑–∞—è–≤–∫—É!", show_alert=True)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫—É—Ä—å–µ—Ä—É
        complete_button = InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(
                text="–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É",
                callback_data=f"complete_client_{order.id}"
            )
        ]])
        
        await bot.send_message(
            chat_id=courier.tg_code,
            text=f"üöö –í—ã –≤–∑—è–ª–∏ –∑–∞—è–≤–∫—É #{order.id}\n"
                 f"–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: –í –ø—É—Ç–∏\n"
                 f"–ê–¥—Ä–µ—Å –ê: {order.delivery_address_a}\n"
                 f"–ê–¥—Ä–µ—Å –ë: {order.delivery_address_b}",
            reply_markup=complete_button
        )

    except Courier.DoesNotExist:
        await callback_query.answer("‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫ –∫—É—Ä—å–µ—Ä!", show_alert=True)
    except OrderByClient.DoesNotExist:
        await callback_query.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", show_alert=True)
    except Exception as e:
        print(f"Error in process_take_client: {e}")
        await callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!", show_alert=True)


@dp.callback_query(lambda c: c.data and c.data.startswith("complete_store_"))
async def process_complete_store(callback_query: types.CallbackQuery):
    try:
        order_id = int(callback_query.data.split("_")[-1])
        user_tg = callback_query.from_user.id

        # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—å–µ—Ä–∞
        courier = await sync_to_async(Courier.objects.get)(tg_code=str(user_tg))
        order = await sync_to_async(Order.objects.get)(pk=order_id, courier=courier)

        if order.status != 'en_route':
            await callback_query.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –≤ —Å—Ç–∞—Ç—É—Å–µ '–í –ø—É—Ç–∏'!", show_alert=True)
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        order.status = 'delivered'
        order.paid = True
        await sync_to_async(order.save)()

        # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫—É
        await bot.edit_message_reply_markup(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            reply_markup=None
        )

        await callback_query.answer("‚úÖ –ó–∞–∫–∞–∑ –∑–∞–≤–µ—Ä—à—ë–Ω!", show_alert=True)

        await bot.send_message(
            chat_id=courier.tg_code,
            text=f"‚úÖ –ó–∞–∫–∞–∑ #{order.id} –∑–∞–≤–µ—Ä—à—ë–Ω!\n"
                 f"–°—Ç–∞—Ç—É—Å: –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ\n"
                 f"–í—Ä–µ–º—è: {order.created_at:%Y-%m-%d %H:%M}"
        )

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–∞—Ä—Ç–Ω–µ—Ä—É, –µ—Å–ª–∏ –µ—Å—Ç—å
        if order.partner and order.partner.tg_code:
            await bot.send_message(
                chat_id=order.partner.tg_code,
                text=f"üì¶ –ó–∞–∫–∞–∑ #{order.id} –±—ã–ª —É—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω –∫—É—Ä—å–µ—Ä–æ–º {courier.user or courier.phone_number}."
            )

    except Order.DoesNotExist:
        await callback_query.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –≤—ã –Ω–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –∫—É—Ä—å–µ—Ä!", show_alert=True)
    except Exception as e:
        print(f"Error in process_complete_store: {e}")
        await callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏!", show_alert=True)


@dp.callback_query(lambda c: c.data and c.data.startswith("complete_client_"))
async def process_complete_client(callback_query: types.CallbackQuery):
    try:
        order_id = int(callback_query.data.split("_")[-1])
        user_tg = callback_query.from_user.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∫—É—Ä—å–µ—Ä–∞
        courier = await sync_to_async(Courier.objects.get)(tg_code=str(user_tg))
        order = await sync_to_async(OrderByClient.objects.get)(pk=order_id, courier=courier)

        if order.status != 'en_route':
            await callback_query.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –≤ —Å—Ç–∞—Ç—É—Å–µ '–í –ø—É—Ç–∏'!", show_alert=True)
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        order.status = 'delivered'
        order.paid = True
        await sync_to_async(order.save)()

        # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        await bot.edit_message_reply_markup(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            reply_markup=None
        )

        await callback_query.answer("‚úÖ –î–æ—Å—Ç–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", show_alert=True)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await bot.send_message(
            chat_id=courier.tg_code,
            text=f"‚úÖ –ó–∞—è–≤–∫–∞ #{order.id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
                 f"–°—Ç–∞—Ç—É—Å: –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ\n"
                 f"–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {order.created_at:%Y-%m-%d %H:%M}"
        )

    except OrderByClient.DoesNotExist:
        await callback_query.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º –∫—É—Ä—å–µ—Ä–æ–º!", show_alert=True)
    except Exception as e:
        print(f"Error in process_complete_client: {e}")
        await callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!", show_alert=True)


async def send_order_notification(order: Order):
    if order.courier:
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–º—É –∫—É—Ä—å–µ—Ä—É
        await send_courier_message(order.courier.tg_code, order)
    else:
        # –†–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º –∫—É—Ä—å–µ—Ä–∞–º
        couriers = await sync_to_async(list)(Courier.objects.exclude(tg_code__isnull=True))
        for courier in couriers:
            await send_courier_message(courier.tg_code, order)

async def send_courier_message(chat_id: str, order: Order):
    try:
        text = (
            f"üì¶ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order.id}\n"
            f"–ê–¥—Ä–µ—Å: {order.delivery_address}\n"
            f"–°—É–º–º–∞: {order.total_price} —Å–æ–º"
        )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="–í–∑—è—Ç—å –∑–∞–∫–∞–∑", callback_data=f"take_{order.id}")
        ]])
        
        await bot.send_message(chat_id, text, reply_markup=keyboard)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())